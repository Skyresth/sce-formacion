#parse("comun.vm")
#set($manyToManyGenerated = false)
#foreach($link in $entity.selectedLinks)
#* *##if ($link.isCardinalityManyToMany())
#*      *##set($manyToManyGenerated = true)
#* *##end
#end
package org.gobcan.sce.apps.${NOMBRE_CORTO_AREA}.${NOMBRE_CORTO_PROYECTO}.rest.ws.resources;

#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end
#if ($manyToManyGenerated)
import java.util.HashMap;
import java.util.List;
import java.util.Map;

#end
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
#if ($manyToManyGenerated)
import javax.ws.rs.core.Context;
#end
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
#if ($manyToManyGenerated)
import javax.ws.rs.core.UriInfo;
#end

import org.gobcan.sce.apps.${NOMBRE_CORTO_AREA}.${NOMBRE_CORTO_PROYECTO}.core.exceptions.${NOMBRE_CORTO_PROYECTO_CAPITALIZADO}CoreException;
#foreach($link in $entity.selectedLinks)
#* *##if ($link.isCardinalityManyToMany())
## Esto es un parche, el campo link.joinTableName no funciona por fallo de Telosys
## El id del elemento tiene este patrón: <PREFIJO>.<JOIN_TABLE_NAME>_I
#*      *##set($linkIdNoPreffix = $link.id.split("\.").get(1))
#*      *##set($joinTableNameLength = $linkIdNoPreffix.length() - 2)
#*      *##set($joinTableName = $linkIdNoPreffix.substring(0, $joinTableNameLength))
## Ahora buscamos la entidad que se usa para realizar la asociación
#*      *##set ($joinTableEntity = '')
#*      *##foreach ($currentEntity in $selectedEntities)
#*           *##if ($currentEntity.databaseTable == $joinTableName)
#*                *##set ($joinTableEntity = $currentEntity)
#*                *##break
#*           *##end
#*      *##end
import org.gobcan.sce.apps.${NOMBRE_CORTO_AREA}.${NOMBRE_CORTO_PROYECTO}.core.services.${joinTableEntity.name}Service;
import org.gobcan.sce.apps.${NOMBRE_CORTO_AREA}.${NOMBRE_CORTO_PROYECTO}.data.dto.${joinTableEntity.name}Dto;
import org.gobcan.sce.apps.${NOMBRE_CORTO_AREA}.${NOMBRE_CORTO_PROYECTO}.core.services.${link.targetEntity.name}Service;
import org.gobcan.sce.apps.${NOMBRE_CORTO_AREA}.${NOMBRE_CORTO_PROYECTO}.data.dto.${link.targetEntity.name}Dto;
#* *##end
#end
import org.gobcan.sce.apps.${NOMBRE_CORTO_AREA}.${NOMBRE_CORTO_PROYECTO}.core.services.${entity.name}Service;
import org.gobcan.sce.apps.${NOMBRE_CORTO_AREA}.${NOMBRE_CORTO_PROYECTO}.data.dto.${entity.name}Dto;
import org.gobcan.sce.apps.${NOMBRE_CORTO_AREA}.${NOMBRE_CORTO_PROYECTO}.rest.enums.${NOMBRE_CORTO_PROYECTO_CAPITALIZADO}RestErrorCodes;
import org.gobcan.sce.apps.${NOMBRE_CORTO_AREA}.${NOMBRE_CORTO_PROYECTO}.rest.exceptions.${NOMBRE_CORTO_PROYECTO_CAPITALIZADO}RestException;
#if ($manyToManyGenerated)
import org.gobcan.sce.apps.${NOMBRE_CORTO_AREA}.${NOMBRE_CORTO_PROYECTO}.rest.utils.SceResourceUtils;
#end
import org.gobcan.sce.apps.${NOMBRE_CORTO_AREA}.${NOMBRE_CORTO_PROYECTO}.rest.ws.Constants;
import org.gobcan.sce.apps.${NOMBRE_CORTO_AREA}.${NOMBRE_CORTO_PROYECTO}.rest.ws.responsedata.ResponseList;
import org.gobcan.sce.libs.commons.multi.jersey.exceptions.SWSCEApplicationException;
import org.gobcan.sce.libs.commons.multi.jersey.model.annotations.SecureByToken;
import org.gobcan.sce.libs.commons.multi.jersey.model.entities.responses.ResponseData;
import org.gobcan.sce.libs.commons.multi.jersey.model.enums.TrustOption;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Path("/${entityNameHyphenatedPlural}")
@Produces(MediaType.APPLICATION_JSON)
@Api(value = "/${entityNameHyphenatedPlural}")
@SecureByToken(applicationId = Constants.APP_NAME, trustedApplications = TrustOption.NONE)
public class ${entity.name}Resource {
    @Autowired
    ${entity.name}Service ${entityNameCamelCaseSingular}Service;

#foreach($link in $entity.selectedLinks)
#* *##if ($link.isCardinalityManyToMany())
## Esto es un parche, el campo link.joinTableName no funciona por fallo de Telosys
## El id del elemento tiene este patrón: <PREFIJO>.<JOIN_TABLE_NAME>_I
#*      *##set($linkIdNoPreffix = $link.id.split("\.").get(1))
#*      *##set($joinTableNameLength = $linkIdNoPreffix.length() - 2)
#*      *##set($joinTableName = $linkIdNoPreffix.substring(0, $joinTableNameLength))
## Ahora buscamos la entidad que se usa para realizar la asociación
#*      *##set ($joinTableEntity = '')
#*      *##foreach ($currentEntity in $selectedEntities)
#*           *##if ($currentEntity.databaseTable == $joinTableName)
#*                *##set ($joinTableEntity = $currentEntity)
#*                *##break
#*           *##end
#*      *##end
    @Autowired
    ${joinTableEntity.name}Service $fn.uncapitalize($joinTableEntity.name)Service;

    @Autowired
    ${link.targetEntity.name}Service $fn.uncapitalize($link.targetEntity.name)Service;

#* *##end
#end
    @GET
    @ApiOperation(value = "Devuelve todos los elementos filtrados")
    @ApiResponses(value = { @ApiResponse(code = 200, message = "Respuesta correcta", response = ResponseData.class) })
    public Response query(@QueryParam("q") String query, @QueryParam("pageIndex") int pageIndex, @QueryParam("pageSize") int pageSize, @QueryParam("sortField") String sortField,
            @QueryParam("sortOrder") int sortOrder) throws SWSCEApplicationException {

        Page<${entity.name}Dto> ${entityNameCamelCasePlural} = ${entityNameCamelCaseSingular}Service.query(query, pageIndex, pageSize, sortField, sortOrder);

        ResponseList<${entityNamePascalCaseSingular}Dto> responseList = new ResponseList<>(${entityNameCamelCasePlural}.getContent(), ${entityNameCamelCasePlural}.getTotalElements());
        ResponseData<ResponseList<${entity.name}Dto>> responseData = new ResponseData<>(responseList);
        return responseData.ok();
    }

    @GET
    @Path("/{${keyAttribute.name}}")
    @ApiOperation(value = "Devuelve un elemento")
    @ApiResponses(value = { @ApiResponse(code = 200, message = "Respuesta correcta", response = ResponseData.class) })
    public Response findOne(@ApiParam(required = true) @PathParam("${keyAttribute.name}") ${keyAttribute.type} ${keyAttribute.name}) throws SWSCEApplicationException {
        ${entity.name}Dto ${entityNameCamelCaseSingular} = ${entityNameCamelCaseSingular}Service.findOne(${keyAttribute.name});
        if (${entityNameCamelCaseSingular} == null) {
            return Response.status(Status.NOT_FOUND).build();
        }
        ResponseData<${entity.name}Dto> responseData = new ResponseData<>(${entityNameCamelCaseSingular});
        return responseData.ok();
    }

    @DELETE
    @Path("/{${keyAttribute.name}}")
    @ApiOperation(value = "Elimina un elemento")
    @ApiResponses(value = { @ApiResponse(code = 200, message = "Respuesta correcta", response = Response.class) })
#set($writePermissionProfile = $sceVelocityTools.getEntityVariable($project.locationFullPath, $entityNameCamelCaseSingular, 'writePermission'))
#if ($writePermissionProfile != '')
    @SecureByToken(applicationId = Constants.APP_NAME, trustedApplications = TrustOption.NONE, executionProfiles = {Constants.PERFIL_$fn.toUpperCase($writePermissionProfile)})
#end
    public Response delete(@ApiParam(required = true) @PathParam("${keyAttribute.name}") ${keyAttribute.type} ${keyAttribute.name}) {
        ${entityNameCamelCaseSingular}Service.delete(${keyAttribute.name});
        return Response.noContent().build();
    }

    @POST
    @ApiOperation(value = "Crea o modifica un elemento")
    @ApiResponses(value = { @ApiResponse(code = 200, message = "Respuesta correcta", response = ResponseData.class) })
#if ($writePermissionProfile != '')
    @SecureByToken(applicationId = Constants.APP_NAME, trustedApplications = TrustOption.NONE, executionProfiles = {Constants.PERFIL_$fn.toUpperCase($writePermissionProfile)})
#end
    public Response save(${entity.name}Dto ${entityNameCamelCaseSingular}Dto) throws SWSCEApplicationException {
        ${entity.name}Dto ${entityNameCamelCaseSingular} = null;
        try {
            ${entityNameCamelCaseSingular} = ${entityNameCamelCaseSingular}Service.save(${entityNameCamelCaseSingular}Dto);
        } catch (${NOMBRE_CORTO_PROYECTO_CAPITALIZADO}CoreException e) {
            throw new ${NOMBRE_CORTO_PROYECTO_CAPITALIZADO}RestException(${NOMBRE_CORTO_PROYECTO_CAPITALIZADO}RestErrorCodes.OPTIMISTIC_LOCKING_FAILURE);
        }

        ResponseData<${entity.name}Dto> responseData = new ResponseData<>(${entityNameCamelCaseSingular});
        return responseData.ok();
    }

    @PUT
    @Path("/{${keyAttribute.name}}")
    @ApiOperation(value = "Modifica un elemento")
    @ApiResponses(value = { @ApiResponse(code = 200, message = "Respuesta correcta", response = ResponseData.class) })
#if ($writePermissionProfile != '')
    @SecureByToken(applicationId = Constants.APP_NAME, trustedApplications = TrustOption.NONE, executionProfiles = {Constants.PERFIL_$fn.toUpperCase($writePermissionProfile)})
#end
    public Response edit(@ApiParam(required = true) @PathParam("${keyAttribute.name}") ${keyAttribute.type} ${keyAttribute.name}, ${entity.name}Dto ${entityNameCamelCaseSingular}Dto) throws SWSCEApplicationException {
        ${entityNameCamelCaseSingular}Dto.set${fn.capitalize($keyAttribute.name)}(${keyAttribute.name});
        return save(${entityNameCamelCaseSingular}Dto);
    }
#foreach($link in $entity.selectedLinks)
#* *##if ($link.isCardinalityManyToMany())
## Esto es un parche, el campo link.joinTableName no funciona por fallo de Telosys
## El id del elemento tiene este patrón: <PREFIJO>.<JOIN_TABLE_NAME>_I
#*      *##set($linkIdNoPreffix = $link.id.split("\.").get(1))
#*      *##set($joinTableNameLength = $linkIdNoPreffix.length() - 2)
#*      *##set($joinTableName = $linkIdNoPreffix.substring(0, $joinTableNameLength))
## Ahora buscamos la entidad que se usa para realizar la asociación
#*      *##set ($joinTableEntity = '')
#*      *##foreach ($currentEntity in $selectedEntities)
#*           *##if ($currentEntity.databaseTable == $joinTableName)
#*                *##set ($joinTableEntity = $currentEntity)
#*                *##break
#*           *##end
#*      *##end
#*      *##set($targetEntityNamePascalCaseSingular = ${link.targetEntity.name})
#*      *##set($targetEntityNameCamelCaseSingular = $fn.uncapitalize($targetEntityNamePascalCaseSingular))
## Entity Plural: databaseCatalog = nombre de la entidad en Pascal Case plural
#*      *##set($targetEntityNamePascalCasePlural = $link.targetEntity.databaseCatalog)
#*      *##set($targetEntityNameCamelCasePlural = $fn.uncapitalize($targetEntityNamePascalCasePlural))
#*      *##set($targetEntityKeyAttribute = $link.targetEntity.keyAttributes.get(0))

    @GET
    @Path("/{${keyAttribute.name}}/${targetEntityNameCamelCasePlural}")
    @ApiOperation(value = "Devuelve $targetEntityNameCamelCasePlural de $entityNameCamelCaseSingular")
    @ApiResponses(value = { @ApiResponse(code = 200, message = "Respuesta correcta", response = ResponseData.class) })
    public Response findAll${targetEntityNamePascalCasePlural}(@ApiParam(required = true) @PathParam("${keyAttribute.name}") ${keyAttribute.type} ${keyAttribute.name}, @Context UriInfo ui, @QueryParam("pageIndex") int pageIndex,
            @QueryParam("pageSize") int pageSize, @QueryParam("sortField") String sortField, @QueryParam("sortOrder") int sortOrder) throws SWSCEApplicationException {

        Map<String, List<String>> queryParameters = SceResourceUtils.addQueryParameter(ui, "${entityNameCamelCasePlural}.${keyAttribute.name}", ${keyAttribute.name}.toString());
        Page<${targetEntityNamePascalCaseSingular}Dto> ${targetEntityNameCamelCasePlural} = ${targetEntityNameCamelCaseSingular}Service.findAll(queryParameters, pageIndex, pageSize, sortField, sortOrder);

        ResponseList<${targetEntityNamePascalCaseSingular}Dto> responseList = new ResponseList<>(${targetEntityNameCamelCasePlural}.getContent(), ${targetEntityNameCamelCasePlural}.getTotalElements());
        ResponseData<ResponseList<${targetEntityNamePascalCaseSingular}Dto>> responseData = new ResponseData<>(responseList);
        return responseData.ok();
    }
## Entity Plural: databaseCatalog = nombre de la entidad en Pascal Case plural
#*      *##set($joinTableEntityNamePascalCaseSingular = $joinTableEntity.name)
#*      *##set($joinTableEntityNameCamelCaseSingular = $fn.uncapitalize($joinTableEntityNamePascalCaseSingular))
#*      *##set($joinTableEntityNamePascalCasePlural = $joinTableEntity.databaseCatalog)
#*      *##set($joinTableEntityNameCamelCasePlural = $fn.uncapitalize($joinTableEntityNamePascalCasePlural))
#*      *##set($joinTableEntityKeyAttribute = $joinTableEntity.keyAttributes.get(0))

    @DELETE
    @Path("/{${keyAttribute.name}}/${targetEntityNameCamelCasePlural}/{${targetEntityKeyAttribute.name}}")
    @ApiOperation(value = "Elimina $targetEntityNameCamelCaseSingular de $entityNameCamelCaseSingular")
    @ApiResponses(value = { @ApiResponse(code = 200, message = "Respuesta correcta", response = Response.class) })
    public Response delete${joinTableEntity.name}(@ApiParam(required = true) @PathParam("${keyAttribute.name}") ${keyAttribute.type} ${keyAttribute.name},
            @ApiParam(required = true) @PathParam("${targetEntityKeyAttribute.name}") ${targetEntityKeyAttribute.type} ${targetEntityKeyAttribute.name}) {

        Map<String, List<String>> filters = new HashMap<>();
        SceResourceUtils.addQueryParameter(filters, "${keyAttribute.name}", ${keyAttribute.name}.toString());
        SceResourceUtils.addQueryParameter(filters, "${targetEntityKeyAttribute.name}", ${targetEntityKeyAttribute.name}.toString());
        Page<${joinTableEntityNamePascalCaseSingular}Dto> ${joinTableEntityNameCamelCasePlural} = ${joinTableEntityNameCamelCaseSingular}Service.findAll(filters);

        if (${joinTableEntityNameCamelCasePlural}.getContent().isEmpty()) {
            return Response.status(Status.NOT_FOUND).build();
        }

        ${joinTableEntityNameCamelCaseSingular}Service.delete(${joinTableEntityNameCamelCasePlural}.getContent().get(0).get${fn.capitalize($joinTableEntityKeyAttribute.name)}());
        return Response.noContent().build();
    }

    @POST
    @Path("/{${keyAttribute.name}}/${targetEntityNameCamelCasePlural}/{${targetEntityKeyAttribute.name}}")
    @ApiOperation(value = "Crea o modifica $targetEntityNameCamelCaseSingular en $entityNameCamelCaseSingular")
    @ApiResponses(value = { @ApiResponse(code = 200, message = "Respuesta correcta", response = ResponseData.class) })
    public Response save${joinTableEntityNamePascalCaseSingular}(@ApiParam(required = true) @PathParam("${keyAttribute.name}") ${keyAttribute.type} ${keyAttribute.name},
            @ApiParam(required = true) @PathParam("${targetEntityKeyAttribute.name}") ${targetEntityKeyAttribute.type} ${targetEntityKeyAttribute.name}) throws SWSCEApplicationException {

        ${joinTableEntityNamePascalCaseSingular}Dto ${joinTableEntityNameCamelCaseSingular}Dto = new ${joinTableEntityNamePascalCaseSingular}Dto();
        ${joinTableEntityNameCamelCaseSingular}Dto.set${fn.capitalize($keyAttribute.name)}(${keyAttribute.name});
        ${joinTableEntityNameCamelCaseSingular}Dto.set${fn.capitalize($targetEntityKeyAttribute.name)}(${targetEntityKeyAttribute.name});

        ${joinTableEntityNamePascalCaseSingular}Dto ${joinTableEntityNameCamelCaseSingular} = null;
        try {
            ${joinTableEntityNameCamelCaseSingular} = ${joinTableEntityNameCamelCaseSingular}Service.save(${joinTableEntityNameCamelCaseSingular}Dto);
        } catch (${NOMBRE_CORTO_PROYECTO_CAPITALIZADO}CoreException e) {
            throw new ${NOMBRE_CORTO_PROYECTO_CAPITALIZADO}RestException(${NOMBRE_CORTO_PROYECTO_CAPITALIZADO}RestErrorCodes.OPTIMISTIC_LOCKING_FAILURE);
        }

        ResponseData<${joinTableEntityNamePascalCaseSingular}Dto> responseData = new ResponseData<>(${joinTableEntityNameCamelCaseSingular});
        return responseData.ok();
    }
#* *##end##if
#end##foreach
#if ($manyToManyGenerated)

    @GET
    @Path("/search-links")
    @ApiOperation(value = "Devuelve todos los elementos enlazados o no enlazados filtrados")
    @ApiResponses(value = { @ApiResponse(code = 200, message = "Respuesta correcta", response = ResponseData.class) })
    public Response searchLinks(@Context UriInfo ui, @QueryParam("pageIndex") int pageIndex, @QueryParam("pageSize") int pageSize, @QueryParam("sortField") String sortField,
            @QueryParam("sortOrder") int sortOrder) throws SWSCEApplicationException {

        Page<${entity.name}Dto> ${entityNameCamelCasePlural} = ${entityNameCamelCaseSingular}Service.findAll(ui.getQueryParameters(), pageIndex, pageSize, sortField, sortOrder);

        ResponseList<${entityNamePascalCaseSingular}Dto> responseList = new ResponseList<>(${entityNameCamelCasePlural}.getContent(), ${entityNameCamelCasePlural}.getTotalElements());
        ResponseData<ResponseList<${entity.name}Dto>> responseData = new ResponseData<>(responseList);
        return responseData.ok();
    }
#end
}
